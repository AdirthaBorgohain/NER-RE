title: "Spacy project to train NER model from text"
description: "This project implements a spaCy component with a custom machine learning model, to train it with and without a transformer, and apply it on an evaluation dataset."

# Variables can be referenced across the project.yml using ${vars.var_name}
vars:
  annotations_train: "assets/annotations_train.jsonl"
  annotations_dev: "assets/annotations_dev.jsonl"
  annotations_test: "assets/annotations_test.jsonl"
  tok2vec_config: "configs/ner_tok2vec.cfg"
  trf_config: "configs/ner_trf.cfg"
  train_file: "data/train.spacy"
  dev_file: "data/dev.spacy"
  test_file: "data/test.spacy"
  trained_model: "training/model-best"

# These are the directories that the project needs. The project CLI will make
# sure that they always exist.
directories: ["scripts", "configs", "assets", "data", "training"]

# Assets that should be downloaded or available in the directory. You can replace
# this with your own input data.
# assets:
#     - dest: ${vars.annotations}
#       description: "Gold-standard REL annotations created with Prodigy"

workflows:
  all:
    - data
    - train_cpu
    - evaluate_cpu
  all_gpu:
    - data
    - train_gpu
    - evaluate_gpu

# Project commands, specified in a style similar to CI config files (e.g. Azure
# pipelines). The name is the command name that lets you trigger the command
# via "spacy project run [command] [path]". The help message is optional and
# shown when executing "spacy project run [optional command] [path] --help".
commands:
  - name: "data"
    help: "Parse the NER annotations from the Prodigy Relation Extraction annotations."
    script:
      - "python ./scripts/parse_data.py ${vars.annotations_train} ${vars.annotations_dev} ${vars.annotations_test} ${vars.train_file} ${vars.dev_file} ${vars.test_file}"
    deps:
      - ${vars.annotations_train}
      - ${vars.annotations_dev}
      - ${vars.annotations_test}
    outputs:
      - ${vars.train_file}
      - ${vars.dev_file}
      - ${vars.test_file}

  - name: "train_cpu"
    help: "Train the REL model on the CPU and evaluate on the dev corpus."
    script:
      - "python -m spacy train ${vars.tok2vec_config} --output training --paths.train ${vars.train_file} --paths.dev ${vars.dev_file}"
    deps:
      - ${vars.train_file}
      - ${vars.dev_file}
    outputs:
      - ${vars.trained_model}

  - name: "train_gpu"
    help: "Train the REL model with a Transformer on a GPU and evaluate on the dev corpus."
    script:
      - "python -m spacy train ${vars.trf_config} --output training --paths.train ${vars.train_file} --paths.dev ${vars.dev_file} --gpu-id 0"
    deps:
      - ${vars.train_file}
      - ${vars.dev_file}
    outputs:
      - ${vars.trained_model}

  - name: "evaluate_cpu"
    help: "Apply the best model to new, unseen text, and measure accuracy at different thresholds using CPU"
    script:
      - "python -m spacy evaluate ${vars.trained_model} ${vars.test_file}"
    deps:
      - ${vars.trained_model}
      - ${vars.test_file}
  
  - name: "evaluate_gpu"
    help: "Apply the best model to new, unseen text, and measure accuracy at different thresholds using GPU"
    script:
      - "python -m spacy evaluate ${vars.trained_model} ${vars.test_file} --gpu-id 0"
    deps:
      - ${vars.trained_model}
      - ${vars.test_file}

  - name: "clean"
    help: "Remove intermediate files to start data preparation and training from a clean slate."
    script:
      - "rm -rf data/*"
      - "rm -rf training/*"
